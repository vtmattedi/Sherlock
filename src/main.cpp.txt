struct LedHandler
{
#define NUM_LEDS 102
private:
    unsigned long _lastMillis = 0;
    int _Index1 = 0;
    int _Index2 = 0;
    int _start_index = 0;
    int _end_index = NUM_LEDS;
    int _num_of_leds = NUM_LEDS;
    int _interval = 25;
    bool _helperFlag = false;
    int _helperInt0 = 0;
    int _helperInt1 = 0;
    byte _helperByte = 0;
    bool _halt = false;
    bool _finite = false;
    bool _show = true;
    uint32_t _finite_timestamp = 0;

    int _old_interval = 25;
    CRGB _old_baseColor = CRGB::Red;
    CRGB _old_baseColor2 = CRGB::Blue;
    function _old_fn = function::Solid;
    direction _old_movement = direction::stop;
    effect _old_options = effect::none;

public:
    function current_fn = function::Solid;
    CRGB baseColor = CRGB::GreenYellow;
    CRGB baseColor2 = CRGB::Blue;
    direction movement = direction::stop;
    effect options = effect::none;
    void setBoundries(int start, int finish)
    {
        for (size_t i = 0; i < NUM_LEDS; i++)
        {
            leds[i] = 0;
        }

        if (finish < start)
        {
            int middleman = finish;
            finish = start;
            start = middleman;
        }
        if (start < 0)
            start = 0;
        if (finish >= NUM_LEDS)
            finish = NUM_LEDS - 1;

        _start_index = start;
        _end_index = finish;
        _num_of_leds = _end_index - _start_index + 1;
    }
    void setInterval(int newInterval, int beatsPerMinute = 0)
    {
        if (newInterval < 10)
        {
            newInterval = 10;
        }
        _interval = newInterval;
        Serial.printf("new interval: %d\n", newInterval);
    }
    void setFinite(uint32_t time_to_finish_ms)
    {
        _finite = true;
        _finite_timestamp = millis() + time_to_finish_ms;
    }
    void setOption(effect newOption)
    {
        options = newOption;
    }
    void setDirection(direction newDirection)
    {
        movement = newDirection;
    }
    void goToLastMode()
    {
        direction temp_mov = _old_movement;
        effect temp_opt = _old_options;

        setMode(_old_fn, _old_baseColor, _old_baseColor2);
        setDirection(temp_mov);
        setOption(_old_options);
    }
    void setMode(function new_fn)
    {
        setMode(new_fn, baseColor);
    }
    void setMode(function new_fn, CRGB newColor1, CRGB newColor2 = CRGB::Black)
    {
        _halt = false;
        _old_fn = current_fn;
        _old_baseColor = baseColor;
        _old_baseColor2 = baseColor2;
        _old_movement = movement;
        _old_options = options;
        options = none;
        movement = stop;
        current_fn = new_fn;
        baseColor = newColor1;
        baseColor2 = newColor2;
        _lastMillis = 0;
        _helperFlag = false;
        _helperInt0 = 0;
        _helperInt1 = 0;
        _helperByte = 0;
        _show = true;
        FastLED.clear();
    }
    void showProgbar(byte percentage, CRGB ValueColor = CRGB::DarkCyan, CRGB BackColor = CRGB::DarkGoldenrod)
    {
        _halt = true;
        byte percentIndex = round(percentage * _end_index / 100);
        for (size_t i = _start_index; i <= _end_index; i++)
        {
            if (i <= percentIndex)
                leds[i] = ValueColor;
            else
                leds[i] = BackColor;
        }
        FastLED.show();
    }

    void partialMove(direction dir, int startIndex, int endIndex, bool loop = true)
    {
        // Serial.printf("Start P.M, d = %d, s = %d, e = %d,\n", dir, startIndex, endIndex);
        // Serial.println("");
        if (dir == foward)
        {
            CRGB first = leds[startIndex];

            for (size_t i = startIndex; i < endIndex; i++)
            {
                // Serial.printf("[%d] - > [%d]\n", i, i + 1);
                leds[i] = leds[i + 1];
            }
            if (loop)
                leds[endIndex] = first;
        }
        else if (dir == backward)
        {
            CRGB last = leds[endIndex];

            for (size_t i = 0; i < endIndex - startIndex; i++)
            {
                // Serial.printf("[%d] - > [%d]\n", endIndex - i, endIndex - (i + 1));
                leds[endIndex - i] = leds[endIndex - (i + 1)];
            }
            if (loop)
                leds[startIndex] = last;
        }

        return;
    }
    void move(direction dir, bool loop = true)
    {
        // partialMove(dir, _start_index, _end_index, loop);
        // return;
        if (dir == foward)
        {
            CRGB first = leds[_start_index];

            for (size_t i = _start_index; i < _end_index; i++)
            {
                leds[i] = leds[i + 1];
            }
            if (loop)
                leds[_end_index] = first;
        }
        else if (dir == backward)
        {
            CRGB first = leds[_end_index];

            for (size_t i = 0; i < _end_index - _start_index; i++)
            {
                leds[_end_index - i] = leds[_end_index - (i + 1)];
            }
            if (loop)
                leds[_start_index] = first;
        }
    }

    uint32_t getHex(CRGB rgb)
    {
        return rgb.red * 0x10000 + rgb.green * 0x100 + rgb.blue;
    }
    void run()
    {
        if (millis() >= _finite_timestamp && _finite)
            goToLastMode();
        if (millis() < _lastMillis + _interval || _halt)
            return;
        _lastMillis = millis();
        if (current_fn == Solid)
        {
            if (options == fade)
            {
                _show = true;
                if (_helperInt0 == 0)
                {
                    for (size_t i = _start_index; i < _end_index; i++)
                    {
                        leds[i] = baseColor;
                    }
                }
                else
                {
                    fadeToBlackBy(leds, NUM_LEDS, 16);
                }
                _helperInt0++;
                if (_helperInt0 == 16)
                    _helperInt0 = 0;
            }
            else if (options == blink)
            {
                _show = true;
                _helperFlag = !_helperFlag;
                for (size_t i = _start_index; i < _end_index; i++)
                {
                    leds[i] = _helperFlag ? baseColor : baseColor2;
                }
            }
            else
            {
                _show = false;
                for (size_t i = _start_index; i < _end_index; i++)
                {
                    if (leds[i] != baseColor)
                    {
                        leds[i] = baseColor;
                        _show = true;
                    }
                }
            }
        }
        else if (current_fn == lightShow)
        {
            fadeToBlackBy(leds, _end_index, 32);
            leds[_start_index + _helperInt0] = _helperFlag ? baseColor : baseColor2;
            leds[_end_index - _helperInt0] = _helperFlag ? baseColor2 : baseColor;
            blur1d(leds, _end_index, 64);
            _helperInt0++;
            if (_start_index + _helperInt0 > _end_index)
            {
                _helperInt0 = 0;
                _helperFlag = !_helperFlag;
                if (_helperFlag = true)
                {
                    baseColor = CHSV(random8(), 255, 255);
                    baseColor2 = CHSV(random8(), 255, 255);
                }
            }
        }
        else if (current_fn == ShowHandlesRandom)
        {
            fadeToBlackBy(leds, _num_of_leds, 8);
            _helperInt0++;
            if (_helperInt0 >= 8)
                move(movement);
            if (_helperInt0 >= 40)
            {
                uint8_t newhue = random8();
                _helperInt0 = 0;
                for (size_t i = 0; i < 10; i++)
                {
                    leds[19 + i] = CHSV(newhue, 255, 255);

                    leds[50 + i] = CHSV(newhue + 85, 255, 255);

                    leds[83 + i] = CHSV(newhue + 170, 255, 255);
                }
            }
        }
        else if (current_fn == ShowHandles)
        {
            _show = false;
            if (leds[19] != baseColor)
            {
               _show = true;
            }
            
            for (size_t i = 0; i < 10; i++)
            {
                leds[19 + i] = baseColor;

                leds[50 + i] = baseColor;

                leds[83 + i] = baseColor;
            }
        }
        else if (current_fn == randomLights)
        {
            fadeToBlackBy(leds, _num_of_leds, 8);
            move(movement);
            leds[random(7, 102)] = CHSV(random8(), 255, 255);
        }
        else if (current_fn == rainbow)
        {
            int midIndex = (_end_index - _start_index) / 2;
            partialMove(movement, _start_index, midIndex);
            partialMove(opposite(movement), midIndex + 1, _end_index);
            if (_helperInt0 == 0)
            {
                int8_t startHue = random8();
                for (size_t i = _start_index; i <= _end_index; i++)
                {
                    leds[i] = CHSV(startHue + i * 4, 255, 255);
                }
                blur1d(leds, NUM_LEDS, 32);
                _helperInt0++;
            }
            else
            {
                if (movement == stop)
                    _show = false;
                else
                    _show = true;
            }
        }
        else if (current_fn == laser)
        {
            move(movement == stop ? backward : movement, false);
            if (_helperInt0 == 0)
                _helperByte = random(1, 8);

            if (movement == foward)
            {
                leds[_end_index] = _helperInt0 < _helperByte ? baseColor : baseColor2;
            }
            else
            {
                leds[_start_index] = _helperInt0 < _helperByte ? baseColor : baseColor2;
            }
            //  blur1d(leds, 102, 16);

            _helperInt0++;
            if (_helperInt0 >= random(32, 64))
                _helperInt0 = 0;
        }
        if (_show)
            FastLED.show();
    }
};

LedHandler ledController;
